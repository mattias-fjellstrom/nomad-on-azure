#---------------------------------------------------------------------------------------------------
# PROVISIONING RECIPES
#---------------------------------------------------------------------------------------------------
apply:
  just platform apply
  just consul apply
  just nomad apply
  just boundary apply

destroy:
  just boundary destroy
  just nomad destroy
  just consul destroy
  just platform destroy

terraform command path:
  #!/bin/bash
  set -euo pipefail

  cd {{ path }}
  terraform init

  if [ "{{command}}" == "plan" ]; then
    terraform plan
  else
    terraform {{command}} -auto-approve
  fi

hcp command:
  just terraform {{command}} infrastructure/hcp

boundary command:
  just terraform {{command}} infrastructure/boundary

platform command:
  just terraform {{command}} infrastructure/platform

consul command:
  just terraform {{command}} infrastructure/consul/servers

nomad command:
  #!/bin/bash
  set -euo pipefail
  
  if [ "{{command}}" == "apply" ]; then
    just terraform apply infrastructure/nomad/servers
    just terraform apply infrastructure/nomad/clients
  else
    just terraform destroy infrastructure/nomad/clients
    just terraform destroy infrastructure/nomad/servers
  fi

#---------------------------------------------------------------------------------------------------
# TERRAFORM OUTPUT RECIPES
#---------------------------------------------------------------------------------------------------
[working-directory: 'infrastructure/nomad/servers']
nomad-output:
  #!/bin/bash
  set -euo pipefail
  terraform output -raw nomad_environment_variables

[working-directory: 'infrastructure/consul/servers']
consul-output:
  #!/bin/bash
  set -euo pipefail
  terraform output -raw consul_environment_variables

#---------------------------------------------------------------------------------------------------
# SSH CONNECTION RECIPES
#---------------------------------------------------------------------------------------------------
connect-to-boundary-workers:
  #!/bin/bash
  NIC_ID=$(az network nic list \
    --resource-group rg-boundary-on-azure \
    --query '[0].ipConfigurations[0].publicIPAddress.id' \
    -o tsv)
  PUBLIC_IP=$(az network public-ip show --ids $NIC_ID --query 'ipAddress' -o tsv)
  ssh -i infrastructure/boundary/ssh_keys/servers.pem azureuser@$PUBLIC_IP

#---------------------------------------------------------------------------------------------------
# TLS/GOSSIP RECIPES
#---------------------------------------------------------------------------------------------------
[working-directory: 'infrastructure/consul/tls']
generate-consul-tls domain:
  #!/bin/bash
  set -euo pipefail

  domain={{ domain }}

  consul tls ca create \
    -name-constraint="true" \
    -additional-name-constraint "$domain"

  consul tls cert create -server -dc dc1 -additional-dnsname "$domain"

[working-directory: 'infrastructure/nomad/tls']
generate-nomad-tls domain:
  #!/bin/bash
  set -euo pipefail

  domain={{ domain }}

  nomad tls ca create -name-constraint="true" -domain "$domain" -additional-domain "$domain"
  nomad tls cert create -server -region global -domain "$domain" -additional-dnsname "$domain"
  nomad tls cert create -client -ca "$domain-agent-ca.pem" -key "$domain-agent-ca-key.pem" -additional-dnsname "$domain"
  nomad tls cert create -cli -ca "$domain-agent-ca.pem" -key "$domain-agent-ca-key.pem" -additional-dnsname "$domain"

[working-directory: 'infrastructure/consul/gossip']
generate-consul-gossip-key:
  #!/bin/bash
  set -euo pipefail
  consul keygen > gossip.key
